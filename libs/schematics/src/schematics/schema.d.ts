/* tslint:disable */
import { SourceFile } from 'ts-morph';

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface FormControlComponent {
  /**
   * Form control component name
   */
  name: string;
  /**
   * The path at which to create the form control component file, relative to the current workspace.
   */
  path?: string;
  /**
   * The name of the project.
   */
  project?: string;
  /**
   * Form control component name
   */
  prefix?: string;

  [ k: string ]: any;
}
/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Creates a sub ngPackage
 */
export interface AddSubPackage {
  /**
   * The name package
   */
  name?: string;
  /**
   * The path at which to create the component file, relative to the current workspace. Default is a folder with the
   * same name as the component in the project root.
   */
  path?: string;
  /**
   * The name of the project.
   */
  project?: string;

  [ k: string ]: any;
}
/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Creates a new generic component module in the given or default project.
 */
export interface ComponentModule {
  /**
   * The path at which to create the component file, relative to the current workspace. Default is a folder with the
   * same name as the component in the project root.
   */
  path?: string;
  /**
   * The name of the project.
   */
  project?: string;
  /**
   * Weather the created component should be added to the declaring module
   */
  routing?: boolean;
  /**
   * The route for this component
   */
  route?: string;
  /**
   * The name of the component.
   */
  name: string;
  stories?: boolean;
  /**
   * When true, includes styles inline in the component.ts file. Only CSS styles can be included inline. By default, an
   * external styles file is created and referenced in the component.ts file.
   */
  inlineStyle?: boolean;
  /**
   * When true, includes template inline in the component.ts file. By default, an external template file is created and
   * referenced in the component.ts file.
   */
  inlineTemplate?: boolean;
  /**
   * The view encapsulation strategy to use in the new component.
   */
  viewEncapsulation?: 'Emulated' | 'Native' | 'None' | 'ShadowDom';
  /**
   * The change detection strategy to use in the new component.
   */
  changeDetection?: 'Default' | 'OnPush';
  /**
   * The prefix to apply to the generated component selector.
   */
  prefix?: {
    [ k: string ]: any;
  };
  /**
   * The file extension or preprocessor to use for style files.
   */
  style?: 'css' | 'scss' | 'sass' | 'less' | 'styl';
  /**
   * Adds a developer-defined type to the filename, in the format "name.type.ts".
   */
  type?: string;
  /**
   * If in debug mode. the resulting component will be printed to stout
   */
  debug?: boolean;
  /**
   * Weather this component has a theme scss
   */
  theme?: boolean;
  /**
   * Weather the component theme file should be imported by the _index.scss
   */
  themeImport?: boolean;
  /**
   * A list of component inputs
   */
  input?: string[];
  /**
   * A list of component outputs
   */
  output?: string[];
  /**
   * A list of component host bindings
   */
  hostBinding?: string[];
  /**
   * A list of component host listener
   */
  hostListener?: string[];
  /**
   * A list of module imports
   */
  import?: string[];
  /**
   * The initial component template
   */
  template?: string;
  /**
   * A list of component 2 way data binding input/output's
   */
  inputOutput?: string[];
  /**
   * When true, does not create "spec.ts" test files for the new component.
   */
  skipTests?: boolean;
  /**
   * When true, creates the new files at the top level of the current project.
   */
  flat?: boolean;
  /**
   * The HTML selector to use for this component.
   */
  selector?: string;
  /**
   * Specifies if the component should have a selector or not.
   */
  skipSelector?: boolean;
  /**
   * The declaring NgModule.
   */
  module?: string;
  /**
   * When true, the new component is the entry component of the declaring NgModule.
   */
  entryComponent?: boolean;
  /**
   * When true, applies lint fixes after generating the component.
   */
  lintFix?: boolean;
  /**
   * When true, the new NgModule imports "CommonModule".
   */
  commonModule?: boolean;

  astTransformer?: (sourceFile: SourceFile, options: ComponentModule) => {}

  [k: string]: any;
}
/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface IdeaRunConfig {
  /**
   * Project name
   */
  name: string;
  /**
   * Project name
   */
  basePath?: string;

  [ k: string ]: any;
}
/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface StorybookConfiguration {
  /**
   * Library name
   */
  name: string;
  /**
   * Run the cypress-configure schematic
   */
  configureCypress?: boolean;
  /**
   * Automatically generate *.stories.ts files for components declared in this library
   */
  generateStories?: boolean;
  /**
   * Automatically generate *.spec.ts files in the cypress e2e app generated by the cypress-configure schematic
   */
  generateCypressSpecs?: boolean;

  [ k: string ]: any;
}
/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface ComponentOutput {
  component?: string;
  property?: string;
  type?: string;
  typeImport?: string;
  /**
   * The component input description
   */
  description?: string;
  path?: string;
  project?: string;

  [ k: string ]: any;
}
/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface ComponentInput {
  component: string;
  property: string;
  type: string;
  typeImport?: string;
  /**
   * The component input description
   */
  description?: string;
  path?: string;
  project?: string;
  initial?: string;

  [ k: string ]: any;
}
/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface LinkComponentToZeplin {
  name: string;
  path?: string;
  project?: string;
  zeplinName?: string[];

  [ k: string ]: any;
}
/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface ComponentHostBinding {
  component: string;
  property: string;
  hostPropertyName: string;
  type: string;
  typeImport?: string;
  path?: string;
  initial: string;
  project?: string;

  [ k: string ]: any;
}
/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface AddStory {
  name?: string;
  path?: string;
  project?: string;
  /**
   * The prefix to apply to the generated component selector.
   */
  prefix?: {
    [ k: string ]: any;
  };

  [ k: string ]: any;
}
/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface ComponentHostListener {
  component: string;
  property: string;
  eventName: string;
  description?: string;
  path?: string;
  project?: string;

  [ k: string ]: any;
}
/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Creates a new generic view component with module for the view system in the given or default project.
 */
export interface ViewComponent {
  /**
   * Form control name
   */
  name: string;
  /**
   * The path at which to create the view component file, relative to the current workspace.
   */
  path?: string;
  /**
   * The name of the project.
   */
  project?: string;
  /**
   * View component name
   */
  prefix?: string;

  [ k: string ]: any;
}
/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface ComponentInputOutput {
  component: string;
  property: string;
  type: string;
  typeImport?: string;
  /**
   * The component input description
   */
  description?: string;
  path?: string;
  project?: string;
  initial?: string;

  [ k: string ]: any;
}
/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Options for the add schematic
 */
export interface AddSchematic {
  /**
   * The name of the new schematic
   */
  name: string;
  /**
   * The absolute path to the schematic folder or the relative path from the project root
   */
  path?: string;
  /**
   * The project where the schematic should be added
   */
  project?: string;
  /**
   * The description of the new schematic
   */
  description: string;

  [ k: string ]: any;
}
/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface SharedModule {
  /**
   * The name of the shared module
   */
  name?: string;
  /**
   * Weather the new module is a component module
   */
  component?: boolean;
  /**
   * The HTML selector to use for this component.
   */
  selector?: string;
  /**
   * A list of component inputs
   */
  input?: string[];
  /**
   * A list of component outputs
   */
  output?: string[];
  /**
   * A list of module imports
   */
  import?: string[];
  /**
   * The initial component template
   */
  template?: string;
  /**
   * A list of component 2 way data binding input/output's
   */
  inputOutput?: string[];
  /**
   * A list of component host bindings
   */
  hostBinding?: string[];
  /**
   * A list of component host listener
   */
  hostListener?: string[];
  zeplinName?: string[];

  [ k: string ]: any;
}
/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface PackageScript {
  /**
   * Project name
   */
  name: string;
  /**
   * Weather the project has custom themes
   */
  'scss-bundle'?: boolean;

  [ k: string ]: any;
}
/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface PackageDependencies {
  /**
   * Project name
   */
  name: string;

  [ k: string ]: any;
}
/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface FeatureModule {
  name: string;
  parentModule: string;

  [ k: string ]: any;
}
/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface ComponentTheme {
  name?: string;
  path?: string;
  project?: string;
  /**
   * The component prefix
   */
  prefix?: string;

  [ k: string ]: any;
}
